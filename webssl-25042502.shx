#!/bin/sh
# This script was generated using Makeself 2.5.0
# The license covering this archive and its contents, if any, is wholly independent of the Makeself license (GPL)

ORIG_UMASK=`umask`
if test "n" = n; then
    umask 077
fi

CRCsum="392363941"
MD5="5cda6cb5fb500ca6fc1bd149e704c838"
SHA="0000000000000000000000000000000000000000000000000000000000000000"
SIGNATURE=""
TMPROOT=${TMPDIR:=/tmp}
USER_PWD="$PWD"
export USER_PWD
ARCHIVE_DIR=`dirname "$0"`
export ARCHIVE_DIR

label="** web_ssl_setup **"
script="./webssl-setup.sh"
scriptargs=""
cleanup_script=""
licensetxt=""
helpheader=""
targetdir="shx64"
filesizes="27668"
totalsize="27668"
keep="n"
nooverwrite="n"
quiet="n"
accept="n"
nodiskspace="n"
export_conf="n"
decrypt_cmd=""
skip="715"

print_cmd_arg=""
if type printf > /dev/null; then
    print_cmd="printf"
elif test -x /usr/ucb/echo; then
    print_cmd="/usr/ucb/echo"
else
    print_cmd="echo"
fi

if test -d /usr/xpg4/bin; then
    PATH=/usr/xpg4/bin:$PATH
    export PATH
fi

if test -d /usr/sfw/bin; then
    PATH=$PATH:/usr/sfw/bin
    export PATH
fi

unset CDPATH

MS_Printf()
{
    $print_cmd $print_cmd_arg "$1"
}

MS_PrintLicense()
{
  PAGER=${PAGER:=more}
  if test x"$licensetxt" != x; then
    PAGER_PATH=`exec <&- 2>&-; which $PAGER || command -v $PAGER || type $PAGER`
    if test -x "$PAGER_PATH"; then
      echo "$licensetxt" | $PAGER
    else
      echo "$licensetxt"
    fi
    if test x"$accept" != xy; then
      while true
      do
        MS_Printf "Please type y to accept, n otherwise: "
        read yn
        if test x"$yn" = xn; then
          keep=n
          eval $finish; exit 1
          break;
        elif test x"$yn" = xy; then
          break;
        fi
      done
    fi
  fi
}

MS_diskspace()
{
	(
	df -k "$1" | tail -1 | awk '{ if ($4 ~ /%/) {print $3} else {print $4} }'
	)
}

MS_dd()
{
    blocks=`expr $3 / 1024`
    bytes=`expr $3 % 1024`
    # Test for ibs, obs and conv feature
    if dd if=/dev/zero of=/dev/null count=1 ibs=512 obs=512 conv=sync 2> /dev/null; then
        dd if="$1" ibs=$2 skip=1 obs=1024 conv=sync 2> /dev/null | \
        { test $blocks -gt 0 && dd ibs=1024 obs=1024 count=$blocks ; \
          test $bytes  -gt 0 && dd ibs=1 obs=1024 count=$bytes ; } 2> /dev/null
    else
        dd if="$1" bs=$2 skip=1 2> /dev/null
    fi
}

MS_dd_Progress()
{
    if test x"$noprogress" = xy; then
        MS_dd "$@"
        return $?
    fi
    file="$1"
    offset=$2
    length=$3
    pos=0
    bsize=4194304
    while test $bsize -gt $length; do
        bsize=`expr $bsize / 4`
    done
    blocks=`expr $length / $bsize`
    bytes=`expr $length % $bsize`
    (
        dd ibs=$offset skip=1 count=1 2>/dev/null
        pos=`expr $pos \+ $bsize`
        MS_Printf "     0%% " 1>&2
        if test $blocks -gt 0; then
            while test $pos -le $length; do
                dd bs=$bsize count=1 2>/dev/null
                pcent=`expr $length / 100`
                pcent=`expr $pos / $pcent`
                if test $pcent -lt 100; then
                    MS_Printf "\b\b\b\b\b\b\b" 1>&2
                    if test $pcent -lt 10; then
                        MS_Printf "    $pcent%% " 1>&2
                    else
                        MS_Printf "   $pcent%% " 1>&2
                    fi
                fi
                pos=`expr $pos \+ $bsize`
            done
        fi
        if test $bytes -gt 0; then
            dd bs=$bytes count=1 2>/dev/null
        fi
        MS_Printf "\b\b\b\b\b\b\b" 1>&2
        MS_Printf " 100%%  " 1>&2
    ) < "$file"
}

MS_Help()
{
    cat << EOH >&2
Makeself version 2.5.0
 1) Getting help or info about $0 :
  $0 --help   Print this message
  $0 --info   Print embedded info : title, default target directory, embedded script ...
  $0 --lsm    Print embedded lsm entry (or no LSM)
  $0 --list   Print the list of files in the archive
  $0 --check  Checks integrity of the archive
  $0 --verify-sig key Verify signature agains a provided key id

 2) Running $0 :
  $0 [options] [--] [additional arguments to embedded script]
  with following options (in that order)
  --confirm             Ask before running embedded script
  --quiet               Do not print anything except error messages
  --accept              Accept the license
  --noexec              Do not run embedded script (implies --noexec-cleanup)
  --noexec-cleanup      Do not run embedded cleanup script
  --keep                Do not erase target directory after running
                        the embedded script
  --noprogress          Do not show the progress during the decompression
  --nox11               Do not spawn an xterm
  --nochown             Do not give the target folder to the current user
  --chown               Give the target folder to the current user recursively
  --nodiskspace         Do not check for available disk space
  --target dir          Extract directly to a target directory (absolute or relative)
                        This directory may undergo recursive chown (see --nochown).
  --tar arg1 [arg2 ...] Access the contents of the archive through the tar command
  --ssl-pass-src src    Use the given src as the source of password to decrypt the data
                        using OpenSSL. See "PASS PHRASE ARGUMENTS" in man openssl.
                        Default is to prompt the user to enter decryption password
                        on the current terminal.
  --cleanup-args args   Arguments to the cleanup script. Wrap in quotes to provide
                        multiple arguments.
  --                    Following arguments will be passed to the embedded script${helpheader}
EOH
}

MS_Verify_Sig()
{
    GPG_PATH=`exec <&- 2>&-; which gpg || command -v gpg || type gpg`
    MKTEMP_PATH=`exec <&- 2>&-; which mktemp || command -v mktemp || type mktemp`
    test -x "$GPG_PATH" || GPG_PATH=`exec <&- 2>&-; which gpg || command -v gpg || type gpg`
    test -x "$MKTEMP_PATH" || MKTEMP_PATH=`exec <&- 2>&-; which mktemp || command -v mktemp || type mktemp`
	offset=`head -n "$skip" "$1" | wc -c | sed "s/ //g"`
    temp_sig=`mktemp -t XXXXX`
    echo $SIGNATURE | base64 --decode > "$temp_sig"
    gpg_output=`MS_dd "$1" $offset $totalsize | LC_ALL=C "$GPG_PATH" --verify "$temp_sig" - 2>&1`
    gpg_res=$?
    rm -f "$temp_sig"
    if test $gpg_res -eq 0 && test `echo $gpg_output | grep -c Good` -eq 1; then
        if test `echo $gpg_output | grep -c $sig_key` -eq 1; then
            test x"$quiet" = xn && echo "GPG signature is good" >&2
        else
            echo "GPG Signature key does not match" >&2
            exit 2
        fi
    else
        test x"$quiet" = xn && echo "GPG signature failed to verify" >&2
        exit 2
    fi
}

MS_Check()
{
    OLD_PATH="$PATH"
    PATH=${GUESS_MD5_PATH:-"$OLD_PATH:/bin:/usr/bin:/sbin:/usr/local/ssl/bin:/usr/local/bin:/opt/openssl/bin"}
	MD5_ARG=""
    MD5_PATH=`exec <&- 2>&-; which md5sum || command -v md5sum || type md5sum`
    test -x "$MD5_PATH" || MD5_PATH=`exec <&- 2>&-; which md5 || command -v md5 || type md5`
    test -x "$MD5_PATH" || MD5_PATH=`exec <&- 2>&-; which digest || command -v digest || type digest`
    PATH="$OLD_PATH"

    SHA_PATH=`exec <&- 2>&-; which shasum || command -v shasum || type shasum`
    test -x "$SHA_PATH" || SHA_PATH=`exec <&- 2>&-; which sha256sum || command -v sha256sum || type sha256sum`

    if test x"$quiet" = xn; then
		MS_Printf "Verifying archive integrity..."
    fi
    offset=`head -n "$skip" "$1" | wc -c | sed "s/ //g"`
    fsize=`cat "$1" | wc -c | sed "s/ //g"`
    if test $totalsize -ne `expr $fsize - $offset`; then
        echo " Unexpected archive size." >&2
        exit 2
    fi
    verb=$2
    i=1
    for s in $filesizes
    do
		crc=`echo $CRCsum | cut -d" " -f$i`
		if test -x "$SHA_PATH"; then
			if test x"`basename $SHA_PATH`" = xshasum; then
				SHA_ARG="-a 256"
			fi
			sha=`echo $SHA | cut -d" " -f$i`
			if test x"$sha" = x0000000000000000000000000000000000000000000000000000000000000000; then
				test x"$verb" = xy && echo " $1 does not contain an embedded SHA256 checksum." >&2
			else
				shasum=`MS_dd_Progress "$1" $offset $s | eval "$SHA_PATH $SHA_ARG" | cut -b-64`;
				if test x"$shasum" != x"$sha"; then
					echo "Error in SHA256 checksums: $shasum is different from $sha" >&2
					exit 2
				elif test x"$quiet" = xn; then
					MS_Printf " SHA256 checksums are OK." >&2
				fi
				crc="0000000000";
			fi
		fi
		if test -x "$MD5_PATH"; then
			if test x"`basename $MD5_PATH`" = xdigest; then
				MD5_ARG="-a md5"
			fi
			md5=`echo $MD5 | cut -d" " -f$i`
			if test x"$md5" = x00000000000000000000000000000000; then
				test x"$verb" = xy && echo " $1 does not contain an embedded MD5 checksum." >&2
			else
				md5sum=`MS_dd_Progress "$1" $offset $s | eval "$MD5_PATH $MD5_ARG" | cut -b-32`;
				if test x"$md5sum" != x"$md5"; then
					echo "Error in MD5 checksums: $md5sum is different from $md5" >&2
					exit 2
				elif test x"$quiet" = xn; then
					MS_Printf " MD5 checksums are OK." >&2
				fi
				crc="0000000000"; verb=n
			fi
		fi
		if test x"$crc" = x0000000000; then
			test x"$verb" = xy && echo " $1 does not contain a CRC checksum." >&2
		else
			sum1=`MS_dd_Progress "$1" $offset $s | CMD_ENV=xpg4 cksum | awk '{print $1}'`
			if test x"$sum1" != x"$crc"; then
				echo "Error in checksums: $sum1 is different from $crc" >&2
				exit 2
			elif test x"$quiet" = xn; then
				MS_Printf " CRC checksums are OK." >&2
			fi
		fi
		i=`expr $i + 1`
		offset=`expr $offset + $s`
    done
    if test x"$quiet" = xn; then
		echo " All good."
    fi
}

MS_Decompress()
{
    if test x"$decrypt_cmd" != x""; then
        { eval "$decrypt_cmd" || echo " ... Decryption failed." >&2; } | eval "base64 --decode -i -"
    else
        eval "base64 --decode -i -"
    fi
    
    if test $? -ne 0; then
        echo " ... Decompression failed." >&2
    fi
}

UnTAR()
{
    if test x"$quiet" = xn; then
		tar $1vf -  2>&1 || { echo " ... Extraction failed." >&2; kill -15 $$; }
    else
		tar $1f -  2>&1 || { echo Extraction failed. >&2; kill -15 $$; }
    fi
}

MS_exec_cleanup() {
    if test x"$cleanup" = xy && test x"$cleanup_script" != x""; then
        cleanup=n
        cd "$tmpdir"
        eval "\"$cleanup_script\" $scriptargs $cleanupargs"
    fi
}

MS_cleanup()
{
    echo 'Signal caught, cleaning up' >&2
    MS_exec_cleanup
    cd "$TMPROOT"
    rm -rf "$tmpdir"
    eval $finish; exit 15
}

finish=true
xterm_loop=
noprogress=n
nox11=n
copy=none
ownership=n
verbose=n
cleanup=y
cleanupargs=
sig_key=

initargs="$@"

while true
do
    case "$1" in
    -h | --help)
	MS_Help
	exit 0
	;;
    -q | --quiet)
	quiet=y
	noprogress=y
	shift
	;;
	--accept)
	accept=y
	shift
	;;
    --info)
	echo Identification: "$label"
	echo Target directory: "$targetdir"
	echo Uncompressed size: 20 KB
	echo Compression: base64
	if test x"n" != x""; then
	    echo Encryption: n
	fi
	echo Date of packaging: Fri Apr 25 17:08:44 IST 2025
	echo Built with Makeself version 2.5.0
	echo Build command was: "./makeself.sh \\
    \"--base64\" \\
    \"./shx64\" \\
    \"webssl-25042502.shx\" \\
    \"** web_ssl_setup **\" \\
    \"./webssl-setup.sh\""
	if test x"$script" != x; then
	    echo Script run after extraction:
	    echo "    " $script $scriptargs
	fi
	if test x"" = xcopy; then
		echo "Archive will copy itself to a temporary location"
	fi
	if test x"n" = xy; then
		echo "Root permissions required for extraction"
	fi
	if test x"n" = xy; then
	    echo "directory $targetdir is permanent"
	else
	    echo "$targetdir will be removed after extraction"
	fi
	exit 0
	;;
    --dumpconf)
	echo LABEL=\"$label\"
	echo SCRIPT=\"$script\"
	echo SCRIPTARGS=\"$scriptargs\"
    echo CLEANUPSCRIPT=\"$cleanup_script\"
	echo archdirname=\"shx64\"
	echo KEEP=n
	echo NOOVERWRITE=n
	echo COMPRESS=base64
	echo filesizes=\"$filesizes\"
    echo totalsize=\"$totalsize\"
	echo CRCsum=\"$CRCsum\"
	echo MD5sum=\"$MD5sum\"
	echo SHAsum=\"$SHAsum\"
	echo SKIP=\"$skip\"
	exit 0
	;;
    --lsm)
cat << EOLSM
No LSM.
EOLSM
	exit 0
	;;
    --list)
	echo Target directory: $targetdir
	offset=`head -n "$skip" "$0" | wc -c | sed "s/ //g"`
	for s in $filesizes
	do
	    MS_dd "$0" $offset $s | MS_Decompress | UnTAR t
	    offset=`expr $offset + $s`
	done
	exit 0
	;;
	--tar)
	offset=`head -n "$skip" "$0" | wc -c | sed "s/ //g"`
	arg1="$2"
    shift 2 || { MS_Help; exit 1; }
	for s in $filesizes
	do
	    MS_dd "$0" $offset $s | MS_Decompress | tar "$arg1" - "$@"
	    offset=`expr $offset + $s`
	done
	exit 0
	;;
    --check)
	MS_Check "$0" y
	exit 0
	;;
    --verify-sig)
    sig_key="$2"
    shift 2 || { MS_Help; exit 1; }
    MS_Verify_Sig "$0"
    ;;
    --confirm)
	verbose=y
	shift
	;;
	--noexec)
	script=""
    cleanup_script=""
	shift
	;;
    --noexec-cleanup)
    cleanup_script=""
    shift
    ;;
    --keep)
	keep=y
	shift
	;;
    --target)
	keep=y
	targetdir="${2:-.}"
    shift 2 || { MS_Help; exit 1; }
	;;
    --noprogress)
	noprogress=y
	shift
	;;
    --nox11)
	nox11=y
	shift
	;;
    --nochown)
	ownership=n
	shift
	;;
    --chown)
        ownership=y
        shift
        ;;
    --nodiskspace)
	nodiskspace=y
	shift
	;;
    --xwin)
	if test "n" = n; then
		finish="echo Press Return to close this window...; read junk"
	fi
	xterm_loop=1
	shift
	;;
    --phase2)
	copy=phase2
	shift
	;;
	--ssl-pass-src)
	if test x"n" != x"openssl"; then
	    echo "Invalid option --ssl-pass-src: $0 was not encrypted with OpenSSL!" >&2
	    exit 1
	fi
	decrypt_cmd="$decrypt_cmd -pass $2"
    shift 2 || { MS_Help; exit 1; }
	;;
    --cleanup-args)
    cleanupargs="$2"
    shift 2 || { MS_Help; exit 1; }
    ;;
    --)
	shift
	break ;;
    -*)
	echo Unrecognized flag : "$1" >&2
	MS_Help
	exit 1
	;;
    *)
	break ;;
    esac
done

if test x"$quiet" = xy -a x"$verbose" = xy; then
	echo Cannot be verbose and quiet at the same time. >&2
	exit 1
fi

if test x"n" = xy -a `id -u` -ne 0; then
	echo "Administrative privileges required for this archive (use su or sudo)" >&2
	exit 1	
fi

if test x"$copy" \!= xphase2; then
    MS_PrintLicense
fi

case "$copy" in
copy)
    tmpdir="$TMPROOT"/makeself.$RANDOM.`date +"%y%m%d%H%M%S"`.$$
    mkdir "$tmpdir" || {
	echo "Could not create temporary directory $tmpdir" >&2
	exit 1
    }
    SCRIPT_COPY="$tmpdir/makeself"
    echo "Copying to a temporary location..." >&2
    cp "$0" "$SCRIPT_COPY"
    chmod +x "$SCRIPT_COPY"
    cd "$TMPROOT"
    export USER_PWD="$tmpdir"
    exec "$SCRIPT_COPY" --phase2 -- $initargs
    ;;
phase2)
    finish="$finish ; rm -rf `dirname $0`"
    ;;
esac

if test x"$nox11" = xn; then
    if test -t 1; then  # Do we have a terminal on stdout?
	:
    else
        if test x"$DISPLAY" != x -a x"$xterm_loop" = x; then  # No, but do we have X?
            if xset q > /dev/null 2>&1; then # Check for valid DISPLAY variable
                GUESS_XTERMS="xterm gnome-terminal rxvt dtterm eterm Eterm xfce4-terminal lxterminal kvt konsole aterm terminology"
                for a in $GUESS_XTERMS; do
                    if type $a >/dev/null 2>&1; then
                        XTERM=$a
                        break
                    fi
                done
                chmod a+x $0 || echo Please add execution rights on $0 >&2
                if test `echo "$0" | cut -c1` = "/"; then # Spawn a terminal!
                    exec $XTERM -e "$0 --xwin $initargs"
                else
                    exec $XTERM -e "./$0 --xwin $initargs"
                fi
            fi
        fi
    fi
fi

if test x"$targetdir" = x.; then
    tmpdir="."
else
    if test x"$keep" = xy; then
	if test x"$nooverwrite" = xy && test -d "$targetdir"; then
            echo "Target directory $targetdir already exists, aborting." >&2
            exit 1
	fi
	if test x"$quiet" = xn; then
	    echo "Creating directory $targetdir" >&2
	fi
	tmpdir="$targetdir"
	dashp="-p"
    else
	tmpdir="$TMPROOT/selfgz$$$RANDOM"
	dashp=""
    fi
    mkdir $dashp "$tmpdir" || {
	echo 'Cannot create target directory' $tmpdir >&2
	echo 'You should try option --target dir' >&2
	eval $finish
	exit 1
    }
fi

location="`pwd`"
if test x"$SETUP_NOCHECK" != x1; then
    MS_Check "$0"
fi
offset=`head -n "$skip" "$0" | wc -c | sed "s/ //g"`

if test x"$verbose" = xy; then
	MS_Printf "About to extract 20 KB in $tmpdir ... Proceed ? [Y/n] "
	read yn
	if test x"$yn" = xn; then
		eval $finish; exit 1
	fi
fi

if test x"$quiet" = xn; then
    # Decrypting with openssl will ask for password,
    # the prompt needs to start on new line
	if test x"n" = x"openssl"; then
	    echo "Decrypting and uncompressing $label..."
	else
        MS_Printf "Uncompressing $label"
	fi
fi
res=3
if test x"$keep" = xn; then
    trap MS_cleanup 1 2 3 15
fi

if test x"$nodiskspace" = xn; then
    leftspace=`MS_diskspace "$tmpdir"`
    if test -n "$leftspace"; then
        if test "$leftspace" -lt 20; then
            echo
            echo "Not enough space left in "`dirname $tmpdir`" ($leftspace KB) to decompress $0 (20 KB)" >&2
            echo "Use --nodiskspace option to skip this check and proceed anyway" >&2
            if test x"$keep" = xn; then
                echo "Consider setting TMPDIR to a directory with more free space."
            fi
            eval $finish; exit 1
        fi
    fi
fi

for s in $filesizes
do
    if MS_dd_Progress "$0" $offset $s | MS_Decompress | ( cd "$tmpdir"; umask $ORIG_UMASK ; UnTAR xp ) 1>/dev/null; then
		if test x"$ownership" = xy; then
			(cd "$tmpdir"; chown -R `id -u` .;  chgrp -R `id -g` .)
		fi
    else
		echo >&2
		echo "Unable to decompress $0" >&2
		eval $finish; exit 1
    fi
    offset=`expr $offset + $s`
done
if test x"$quiet" = xn; then
	echo
fi

cd "$tmpdir"
res=0
if test x"$script" != x; then
    if test x"$export_conf" = x"y"; then
        MS_BUNDLE="$0"
        MS_LABEL="$label"
        MS_SCRIPT="$script"
        MS_SCRIPTARGS="$scriptargs"
        MS_ARCHDIRNAME="$archdirname"
        MS_KEEP="$KEEP"
        MS_NOOVERWRITE="$NOOVERWRITE"
        MS_COMPRESS="$COMPRESS"
        MS_CLEANUP="$cleanup"
        export MS_BUNDLE MS_LABEL MS_SCRIPT MS_SCRIPTARGS
        export MS_ARCHDIRNAME MS_KEEP MS_NOOVERWRITE MS_COMPRESS
    fi

    if test x"$verbose" = x"y"; then
		MS_Printf "OK to execute: $script $scriptargs $* ? [Y/n] "
		read yn
		if test x"$yn" = x -o x"$yn" = xy -o x"$yn" = xY; then
			eval "\"$script\" $scriptargs \"\$@\""; res=$?;
		fi
    else
		eval "\"$script\" $scriptargs \"\$@\""; res=$?
    fi
    if test "$res" -ne 0; then
		test x"$verbose" = xy && echo "The program '$script' returned an error code ($res)" >&2
    fi
fi

MS_exec_cleanup

if test x"$keep" = xn; then
    cd "$TMPROOT"
    rm -rf "$tmpdir"
fi
eval $finish; exit $res
Li93ZWJzc2wtc2V0dXAuc2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAwMDA3NzUAMDAwMTc1
MAAwMDAxNzUwADAwMDAwMDI0NjUxADE1MDAyNjcxNTIzADAxNDE2NgAgMAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1c3RhcgAwMHlhdGhpc2gAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAeWF0aGlzaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAj
IS9iaW4vYmFzaAojPT09PT09PT09PT09PT09PT09PT09PT09PT0KI0F1dGhvcjogWWF0aGlzaCBO
YXJhc2ltaGFuCiNDb250YWN0OiBpdEBhZmZpbmUuYWkKIz09PT09PT09PT09PT09PT09PT09PT09
PT09CiNJbmZvClNDUklQVF9OQU1FPSJ3ZWJzc2xfc2V0dXAiClVQREFURT0yNTA0MjUwMgojRXhl
YwpFRD0wLjMKUkNMPSdcMDMzWzA7MzFtJwpZQ0w9J1wwMzNbNDQ7MzdtJwpCQ0w9J1wwMzNbMTsz
M20nCkNDTD0nXDAzM1swOzM2bScKR0NMPSdcZVszMm0nCk5DTD0nXDAzM1swbScKI0RUJlRaCkRU
Rj0kKGRhdGUgKyVkLSVtLSVZXyVILSVNLSVTKQpDVVJSRU5UX1RJTUVaT05FPSQoZGF0ZSArJVop
CkRFU0lSRURfVElNRVpPTkU9QXNpYS9Lb2xrYXRhCiNzZXJ2ZXJfaW5mbwpIT1NUX05BTUU9JCho
b3N0bmFtZSkKVVNFUl9OQU1FPSQod2hvYW1pKQpGVUxMX05BTUU9JFVTRVJfTkFNRUAkSE9TVF9O
QU1FCklQX0FERFI9JChkaWcgK3Nob3J0IG15aXAub3BlbmRucy5jb20gQHJlc29sdmVyMS5vcGVu
ZG5zLmNvbSkKI0Rpcl9wYXRoCkNFUlRfUk9PVD0vd2ViX3NzbApDRVJUX0JJTj0vd2ViX3NzbC9i
aW4KQURNSU5fRElSPS92YXIvLndlYl9zc2xfYWRtaW4KQklOX0RJUj0vdmFyLy53ZWJfc3NsX2Fk
bWluL2JpbgpDUk9OX0RJUj0vdmFyLy53ZWJfc3NsX2FkbWluL2Nyb24vCkNMSUVOVF9ESVI9L3Zh
ci8ud2ViX3NzbF9hZG1pbi9jbGllbnRfaW5mby8KUkVfRElSPS92YXIvLndlYl9zc2xfYWRtaW4v
cmVuZXdhbF9pbmZvCkxPR19ESVI9L3Zhci8ud2ViX3NzbF9hZG1pbi9sb2dzCiNGaWxlX05hbWUK
Q0VSVF9GSUxFPWZ1bGxjaGFpbi5wZW0KUFJFX0NST05CSz1wcmVfY3JvbmpvYnNfJERURi5iYWsK
UE9TVF9DUk9OQks9cG9zdF9jcm9uam9icy5iYWsKQ1JPTl9GSUxFPWpvYnMuY3JvbgpMT0dfRklM
RT1jbGllbnQubG9nCiNSZW1vdGVfaG9zdHMKUkhPU1Q9ImNlcnRhZG1pbkBzc2wuYWZmaW5lYW5h
bHl0aWNzLmFpIgpUT19FTUFJTD0id2ViX3NzbEBhZmZpbmUuYWkiCiNGb3ItVGVzdGluZwojVE9f
RU1BSUw9InlhdGhpc2gubmFyYXNpbWhhbkBhZmZpbmUuYWkiCiNEb21haW5zCkRPTUFJTjE9Z2Vu
ZXJheC5haQpET01BSU4yPWFmZmluZWFuYWx5dGljcy5haQpET01BSU4zPWFmZmluZWFuYWx5dGlj
cy5jby5pbgpET01BSU40PWFmZmluZS5haQojKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgplY2hvIC1lICIk
e1lDTH0gICAgICAgICAgIFNjcmlwdC1JbmZvICAgICAgICAgICAke05DTH0iICM+Pj4gMDEKZWNo
byAiPiAiJFNDUklQVF9OQU1FIiIKZWNobyAiPiBWZXJzaW9uOiAiJFVQREFURSIiCmVjaG8gLWUg
Ij4gQ29udGFjdDogJHtDQ0x9Iml0QGFmZmluZS5haSIke05DTH0iCmVjaG8gICI+IEluZm86ICJB
ZmZpbmUgSW50ZXJuYWwgVXNlIE9ubHkhIiIKc2xlZXAgIiRFRCIKZWNobyAtZSAiJHtCQ0x9UHJl
c3MgYW55IGtleSB0byBjb250aW51ZS4uLiR7TkNMfSIKcmVhZCAtbiAxIC1zIC1yIGtleQplY2hv
ICI+IgplY2hvIC1lICIke1lDTH0gICAgICAgICAgICBVc2VyLUNoZWNrICAgICAgICAgICAke05D
TH0iICM+Pj4gMDIKaWYgW1sgJCh3aG9hbWkpID09ICJyb290IiBdXTsgdGhlbgogICAgZWNobyAi
UnVubmluZyBhcyByb290IGlzIG5vdCBhbGxvd2VkLiBSdW4gdGhlIHNjcmlwdCBhcyBhIG5vcm1h
bCB1c2VyLiIKICAgIGV4aXQgMQpmaQplY2hvICI+IENhdXRpb24hOiBEb24ndCBydW4gdGhpcyBz
Y3JpcHQgYXMgJ3Jvb3QnLiIKZWNobyAtZSAiPiBMb2dnZWQgaW4gYXM6ICR7Q0NMfSIkRlVMTF9O
QU1FIiR7TkNMfSIKI2VjaG8gIl4iCmVjaG8gIj4gUnVubmluZyBhcyBub24tcm9vdCB1c2VyLi4u
IgpzbGVlcCAiJEVEIgplY2hvIC1lICIke0JDTH1QcmVzcyBhbnkga2V5IHRvIGNvbnRpbnVlLi4u
JHtOQ0x9IgpyZWFkIC1uIDEgLXMgLXIga2V5CmVjaG8gIj4iCmVjaG8gLWUgIiR7WUNMfSAgICAg
ICAgICAgQ29tbWFuZC1DaGVjayAgICAgICAgICAke05DTH0iICM+Pj4gMDMKI2VjaG8gIj4gQ2hl
Y2tpbmcgaWYgcmVxdWlyZWQgY29tbWFuZHMgYXJlIGluc3RhbGxlZC4uLiIKaWYgISBjb21tYW5k
IC12IHNzaC1rZXlnZW4gJj4gL2Rldi9udWxsOyB0aGVuCiAgICBlY2hvICI+IHNzaC1rZXlnZW4g
Y291bGQgbm90IGJlIGZvdW5kLiBQbGVhc2UgaW5zdGFsbCBpdCBmaXJzdC4uLiIKICAgIGV4aXQg
MQpmaQppZiAhIGNvbW1hbmQgLXYgc3NoLWNvcHktaWQgJj4gL2Rldi9udWxsOyB0aGVuCiAgICBl
Y2hvICI+IHNzaC1jb3B5LWlkIGNvdWxkIG5vdCBiZSBmb3VuZC4gUGxlYXNlIGluc3RhbGwgaXQg
Zmlyc3QuLi4iCiAgICBleGl0IDEKZmkKaWYgISBjb21tYW5kIC12IHBlcmwgJj4gL2Rldi9udWxs
OyB0aGVuCiAgICBlY2hvICI+IHBlcmwgY291bGQgbm90IGJlIGZvdW5kLiBQbGVhc2UgaW5zdGFs
bCBpdCBmaXJzdC4uLiIKICAgIGV4aXQgMQpmaQppZiAhIGNvbW1hbmQgLXYgZGlnICY+IC9kZXYv
bnVsbDsgdGhlbgogICAgZWNobyAiPiBkaWcgY291bGQgbm90IGJlIGZvdW5kLiBQbGVhc2UgaW5z
dGFsbCBpdCBmaXJzdC4uLiIKICAgIGV4aXQgMQpmaQojZWNobyAiKiIKZWNobyAiPiBSZXF1aXJl
ZCBjb21tYW5kcyBhcmUgaW5zdGFsbGVkLi4uIiAKc2xlZXAgIiRFRCIKZWNobyAtZSAiJHtCQ0x9
UHJlc3MgYW55IGtleSB0byBjb250aW51ZS4uLiR7TkNMfSIKcmVhZCAtbiAxIC1zIC1yIGtleQpl
Y2hvICI+IgplY2hvIC1lICIke1lDTH0gICAgICAgIFNlbGVjdC1Eb21haW4gICAgICAgICR7TkNM
fSIgIz4+PiAwNAplY2hvICAiU2VsZWN0IHRoZSBEb21haW4gZm9yIFNTTCBzZXR1cDoiCmVjaG8g
LWUgIj4gRW50ZXIgWyAxIF0gZm9yICR7QkNMfSIkRE9NQUlOMSIke05DTH0iCmVjaG8gLWUgIj4g
RW50ZXIgWyAyIF0gZm9yICR7QkNMfSIkRE9NQUlOMiIke05DTH0iCmVjaG8gLWUgIj4gRW50ZXIg
WyAzIF0gZm9yICR7QkNMfSIkRE9NQUlOMyIke05DTH0iCmVjaG8gLWUgIj4gRW50ZXIgWyA0IF0g
Zm9yICR7QkNMfSIkRE9NQUlONCIke05DTH0iCndoaWxlIHRydWU7IGRvCiAgICByZWFkIC1wICJT
ZWxlY3QgYSBEb21haW4gWzEgLSA0XTogIiBvcHRpb24KICAgIGlmIFtbICRvcHRpb24gPX4gXlsx
LTRdJCBdXTsgdGhlbgogICAgICAgIHNlbGVjdGVkX29wdGlvbj1ET01BSU4kb3B0aW9uCiAgICAg
ICAgRE9NQUlOPSR7IXNlbGVjdGVkX29wdGlvbn0KICAgICAgICBlY2hvICI+IgogICAgICAgIGVj
aG8gLWUgIj4gU2VsZWN0ZWQgRG9tYWluIGlzICR7Q0NMfSIkRE9NQUlOIiR7TkNMfS4uLiIKICAg
ICAgICBzbGVlcCAiJEVEIgogICAgICAgIGVjaG8gLWUgIiR7QkNMfVByZXNzIGFueSBrZXkgdG8g
Y29udGludWUuLi4ke05DTH0iCiAgICAgICAgcmVhZCAtbiAxIC1zIC1yIGtleQogICAgICAgIGJy
ZWFrCiAgICBlbHNlCiAgICAgICAgZWNobyAiSW52YWxpZCBpbnB1dCwgUGxlYXNlIHRyeSBhZ2Fp
bi4uLiIKICAgIGZpCmRvbmUKQ0VSVF9ESVI9L3dlYl9zc2wvY2VydC8kRE9NQUlOCkNMSUVOVF9J
TkZPPSRET01BSU4KI2VjaG8gIioiCmVjaG8gIj4iCmVjaG8gLWUgIiR7WUNMfSAgICAgICAgICBE
aXJlY3RvcnktU2V0dXAgICAgICAgICAke05DTH0iICM+Pj4gMDUKc2V0dXBfZGlyZWN0b3J5KCkg
ewogICAgbG9jYWwgZGlyX3BhdGg9JDEKICAgIGlmIFsgLWQgIiRkaXJfcGF0aCIgXTsgdGhlbgog
ICAgICAgIHN1ZG8gY2hvd24gLVIgIiRVU0VSX05BTUUiOiIkVVNFUl9OQU1FIiAiJGRpcl9wYXRo
IgogICAgCiAgICBlbHNlCiAgICAgICAgc3VkbyBta2RpciAtcCAiJGRpcl9wYXRoIgogICAgICAg
IHN1ZG8gY2hvd24gLVIgIiRVU0VSX05BTUUiOiIkVVNFUl9OQU1FIiAiJGRpcl9wYXRoIgogICAg
CiAgICBmaQp9CnNldHVwX2RpcmVjdG9yeSAiJENFUlRfUk9PVCIKc2V0dXBfZGlyZWN0b3J5ICIk
Q0VSVF9CSU4iCnNldHVwX2RpcmVjdG9yeSAiJENFUlRfRElSIgpzZXR1cF9kaXJlY3RvcnkgIiRB
RE1JTl9ESVIiCnNldHVwX2RpcmVjdG9yeSAiJEJJTl9ESVIiCnNldHVwX2RpcmVjdG9yeSAiJENS
T05fRElSIgpzZXR1cF9kaXJlY3RvcnkgIiRDTElFTlRfRElSIgpzZXR1cF9kaXJlY3RvcnkgIiRS
RV9ESVIiCnNldHVwX2RpcmVjdG9yeSAiJExPR19ESVIiCiNlY2hvICIqIgplY2hvICI+IENyZWF0
aW5nIG9yIHVwZGF0aW5nIGRpcmVjdG9yaWVzIGFuZCBwZXJtaXNzaW9ucy4uLiIKZWNobyAiPiBH
cmVuZXJhdGluZyBlbnYgRmlsZS4uLiIKZWNobyAiQ2xpZW50X1NjcmlwdF9WZXJzaW9uPSIkVVBE
QVRFIiIgPiAiJENMSUVOVF9ESVIvJENMSUVOVF9JTkZPIgplY2hvICJTZXR1cF9EYXRlPSIkRFRG
IiIgPj4gIiRDTElFTlRfRElSLyRDTElFTlRfSU5GTyIKZWNobyAiRE9NQUlOPSIkRE9NQUlOIiIg
Pj4gIiRDTElFTlRfRElSLyRDTElFTlRfSU5GTyIKZWNobyAiSVBfQWRkcmVzcz0kSVBfQUREUiIg
Pj4gIiRDTElFTlRfRElSLyRDTElFTlRfSU5GTyIKZWNobyAiVXNlcl9OYW1lPSRVU0VSX05BTUUi
ID4+ICIkQ0xJRU5UX0RJUi8kQ0xJRU5UX0lORk8iCmVjaG8gIlNlcnZlcl9OYW1lPSIkSE9TVF9O
QU1FIiIgPj4gIiRDTElFTlRfRElSLyRDTElFTlRfSU5GTyIKc2xlZXAgIiRFRCIKZWNobyAtZSAi
JHtCQ0x9UHJlc3MgYW55IGtleSB0byBjb250aW51ZS4uLiR7TkNMfSIKcmVhZCAtbiAxIC1zIC1y
IGtleQplY2hvICI+IgplY2hvIC1lICIke1lDTH0gICAgICAgICAgICAgIFNTSC1TZXR1cCAgICAg
ICAgICAgICAgJHtOQ0x9IiAjPj4+IDA2CmVjaG8gIj4gU2V0dGluZyB1cCBTU0ggQ29ubmVjdGlv
biB3aXRoIHRoZSBTZXJ2ZXIuLi4iCmdlbmVyYXRlX2tleV9wYWlyKCkgewogICAgZWNobyAiPiBH
ZW5lcmF0aW5nIFNTSCBrZXkgcGFpci4uLiIKICAgIHNzaC1rZXlnZW4gLXQgcnNhIC1iIDQwOTYg
LWYgfi8uc3NoL2lkX3JzYSAtTiAiIgp9CmlmIFsgISAtZiAkQURNSU5fRElSLy5zc2gubG9jayBd
OyB0aGVuCiAgICB0b3VjaCAkQURNSU5fRElSLy5zc2gubG9jawogICAgZWNobyAiWyREVEZdIiA+
PiAkQURNSU5fRElSLy5zc2gubG9jawogICAgZ2VuZXJhdGVfa2V5X3BhaXIKICAgIGVjaG8gIj4g
VHJhbnNmZXJyaW5nIFNTSCBrZXkgcGFpciB0byBzZXJ2ZXIuLi4iCiAgICBzc2gtY29weS1pZCAk
UkhPU1QKICAgIGVjaG8gIj4gVGVzdGluZyBzc2ggY29ubmVjdGlvbi4uLiIKICAgIHNzaCAtcSAk
UkhPU1QgZXhpdAogICAgICAgIGlmIFsgJD8gLWVxIDAgXTsgdGhlbgogICAgICAgICAgICBlY2hv
ICI+IFNTSCBjb25uZWN0aW9uIHN1Y2Nlc3NmdWwuLi4iCiAgICAgICAgICAgIGVjaG8gLWUgIj4g
JHtDQ0x9U1NILVNldHVwIERvbmUuLi4ke05DTH0iIAogICAgICAgICAgICBzbGVlcCAiJEVEIgog
ICAgICAgICAgICBlY2hvIC1lICIke0JDTH1QcmVzcyBhbnkga2V5IHRvIGNvbnRpbnVlLi4uJHtO
Q0x9IgogICAgICAgICAgICByZWFkIC1uIDEgLXMgLXIga2V5CiAgICAgICAgZWxzZQogICAgICAg
ICAgICBlY2hvIC1lICI+ICR7UkNMfVNTSCBjb25uZWN0aW9uIHRvIHNlcnZlciBmYWlsZWQuIENo
ZWNrIGZvciBlcnJvcnMgYW5kIHRyeSBhZ2Fpbi4uLiR7TkNMfSIKICAgICAgICAgICAgZWNobyAt
ZSAiJHtSQ0x9Xl5eXl4gU1NILVNldHVwIEZhaWxlZCEgXl5eXl5eJHtOQ0x9IgogICAgICAgICAg
ICBleGl0IDEKICAgICAgICBmaQplbHNlCiAgICBlY2hvICI+IFNraXBpbmcuLiBTU0ggU2V0dXAg
ZXhpc3QuIgogICAgZWNobyAiPiBDaGVja2luZyBzc2ggY29ubmVjdGlvbi4uIgogICAgc3NoIC1x
ICIkUkhPU1QiIGV4aXQKICAgIGlmIFsgJD8gLWVxIDAgXTsgdGhlbgogICAgICAgIGVjaG8gLWUg
Ij4gJHtDQ0x9Q29ubmVjdGlvbiBvay4uLiR7TkNMfSIKICAgICAgICBzbGVlcCAiJEVEIgogICAg
ICAgIGVjaG8gLWUgIiR7QkNMfVByZXNzIGFueSBrZXkgdG8gY29udGludWUuLi4ke05DTH0iCiAg
ICAgICAgcmVhZCAtbiAxIC1zIC1yIGtleQogICAgZWxzZQogICAgICAgIGVjaG8gLWUgIj4gJHtS
Q0x9U1NIIGNvbm5lY3Rpb24gdG8gc2VydmVyIGZhaWxlZC4gQ2hlY2sgZm9yIGVycm9ycyBhbmQg
dHJ5IGFnYWluLi4uJHtOQ0x9IgogICAgICAgIGVjaG8gLWUgIiR7UkNMfV5eXl5eIFNTSC1TZXR1
cCBGYWlsZWQhIF5eXl5eXiR7TkNMfSIKICAgICAgICBleGl0IDEKICAgIGZpCmZpCmVjaG8gIj4i
CmVjaG8gLWUgIiR7WUNMfSAgICAgICAgICAgIFRpbWV6b25lLVNldHVwICAgICAgICAgICAke05D
TH0iICM+Pj4gMDcKZWNobyAiPiBDaGVja2luZyBUaW1lem9uZS4uLiIKaWYgWyAiJENVUlJFTlRf
VElNRVpPTkUiID09IElTVCBdOyB0aGVuCiAgICBlY2hvIC1lICI+IEN1cnJlbnQgVGltZXpvbmUg
aXMgJHtDQ0x9J0lTVCcke05DTH0nLi4uIiAKICAgIHNsZWVwICIkRUQiCiAgICBlY2hvIC1lICIk
e0JDTH1QcmVzcyBhbnkga2V5IHRvIGNvbnRpbnVlLi4uJHtOQ0x9IgogICAgcmVhZCAtbiAxIC1z
IC1yIGtleQplbHNlCiAgICBlY2hvIC1lICI+IEN1cnJlbnQgVGltZXpvbmUgaXMgJHtDQ0x9IiRD
VVJSRU5UX1RJTUVaT05FIi4uJHtOQ0x9IgogICAgZWNobyAtZSAiJHtSQ0x9PiBDQVVUSU9OITog
Q2hhbmdpbmcgVGltZXpvbmUgZnJvbSAnIiRDVVJSRU5UX1RJTUVaT05FIicgdG8gJ0lTVCcuLi4k
e05DTH0iCiAgICBpZiBjb21tYW5kIC12IHRpbWVkYXRlY3RsICY+IC9kZXYvbnVsbDsgdGhlbgog
ICAgICAgIHN1ZG8gdGltZWRhdGVjdGwgc2V0LXRpbWV6b25lICIkREVTSVJFRF9USU1FWk9ORSIK
ICAgICAgICBlY2hvIC1lICI+IFRpbWV6b25lIGNoYW5nZWQgdG8gJHtDQ0x9JyIkREVTSVJFRF9U
SU1FWk9ORSInICciJENVUlJFTlRfVElNRVpPTkUiJyR7TkNMfS4uLiIKICAgICAgICBzbGVlcCAi
JEVEIgogICAgICAgIGVjaG8gLWUgIiR7QkNMfVByZXNzIGFueSBrZXkgdG8gY29udGludWUuLi4k
e05DTH0iCiAgICAgICAgcmVhZCAtbiAxIC1zIC1yIGtleQogICAgZWxzZQogICAgICAgIGVjaG8g
Ij4gQ29tbWFuZCBub3QgZm91bmQuIHJvbGxpbmcgYmFjayB0byB0aGUgY29udmVudGlvbmFsIG1l
dGhvZC4uLiIKICAgICAgICBlY2hvICIkREVTSVJFRF9USU1FWk9ORSIgfCBzdWRvIHRlZSAvZXRj
L3RpbWV6b25lCiAgICAgICAgc3VkbyBsbiAtc2YgL3Vzci9zaGFyZS96b25laW5mby8kREVTSVJF
RF9USU1FWk9ORSAvZXRjL2xvY2FsdGltZQogICAgICAgIGVjaG8gIj4gSWdub3JlIGlmIGFueSBl
cnJvciBvY2N1cnJlZCBoZXJlLi4uIgogICAgICAgIGVjaG8gLWUgIj4gVGltZXpvbmUgdXBkYXRl
ZCAke0NDTH0nIiRERVNJUkVEX1RJTUVaT05FIicgJyIkQ1VSUkVOVF9USU1FWk9ORSIke05DTH0n
Li4uIgogICAgICAgIHNsZWVwICIkRUQiCiAgICAgICAgZWNobyAtZSAiJHtCQ0x9UHJlc3MgYW55
IGtleSB0byBjb250aW51ZS4uLiR7TkNMfSIKICAgICAgICByZWFkIC1uIDEgLXMgLXIga2V5CiAg
ICBmaQpmaQplY2hvICI+IgplY2hvIC1lICIke1lDTH0gICAgICAgICAgICBDcm9uam9iLVNldHVw
ICAgICAgICAgICAgJHtOQ0x9IiAjPj4+IDA4CmVjaG8gIj4gRG93bmxvYWRpbmcgQ3JvbiBmaWxl
cyBmcm9tIHNlcnZlci4uLiIKc2NwIC1yICRSSE9TVDokQklOX0RJUi8qICRCSU5fRElSLwplY2hv
ICI+IEJhY2tpbmcgdXAgZXhpc3RpbmcgY3JvbmpvYnMuLi4iCmNyb250YWIgLWwgPiAkQ1JPTl9E
SVIvJFBSRV9DUk9OQksKZWNobyAiPiBQcmludGluZyBiYWNrZWQgdXAgY3JvbmZpbGUuLi4iCmNh
dCAkQ1JPTl9ESVIvJFBSRV9DUk9OQksKZWNobyAiPiIKZWNobyAiPiBMaXN0aW5nIGNyb250YWIu
Li4iCmNyb250YWIgLWwKZWNobyAiPiIKZWNobyAiPiBQcm9jZXNzaW5nIGNyb25qb2JzLi4uIgoj
IFJlYWQgdGhlIGNyb24gam9icyBmcm9tIHRoZSBmaWxlIGFuZCBwcm9jZXNzIHRoZW0Kd2hpbGUg
SUZTPSByZWFkIC1yIENST05fSk9COyBkbwogICAgIyBTa2lwIGVtcHR5IGxpbmVzIG9yIGNvbW1l
bnRzCiAgICBpZiBbWyAteiAiJENST05fSk9CIiB8fCAiJENST05fSk9CIiA9PSBcIyogXV07IHRo
ZW4KICAgICAgICBjb250aW51ZQogICAgZmkKICAgICMgQ2hlY2sgaWYgdGhlIGNyb24gam9iIGFs
cmVhZHkgZXhpc3RzCiAgICBpZiBjcm9udGFiIC1sIHwgZ3JlcCAtRnhxICIkQ1JPTl9KT0IiOyB0
aGVuCiAgICAgICAgZWNobyAtZSAiPiAke0JDTH0nJENST05fSk9CJyR7TkNMfSAke0NDTH08IEpv
YiBhbHJlYWR5IGV4aXN0cy4gTm8gY2hhbmdlcyBtYWRlLiR7TkNMfSIKICAgIGVsc2UKICAgICAg
ICAjIEFwcGVuZCB0aGUgbmV3IGNyb24gam9iCiAgICAgICAgKGNyb250YWIgLWw7IGVjaG8gIiRD
Uk9OX0pPQiIpIHwgY3JvbnRhYiAtCiAgICBmaQpkb25lIDwgIiRCSU5fRElSLyRDUk9OX0ZJTEUi
CmVjaG8gIj4iCmVjaG8gIj4gQWxsIHNwZWNpZmllZCBjcm9uIGpvYnMgaGF2ZSBiZWVuIHByb2Nl
c3NlZC4uLiIKZWNobyAtZSAiPiBbSU1QXTogTGlzdGluZyBwb3N0IHByb2Nlc3NlZCBjcm9udGFi
Li4uJHtDQ0x9Igpjcm9udGFiIC1sCmNyb250YWIgLWwgPiAkQ1JPTl9ESVIvJFBPU1RfQ1JPTkJL
CnNsZWVwICIkRUQiCmVjaG8gLWUgIiR7QkNMfVByZXNzIGFueSBrZXkgdG8gY29udGludWUuLi4k
e05DTH0iCnJlYWQgLW4gMSAtcyAtciBrZXkKZWNobyAiPiIKZWNobyAtZSAiJHtZQ0x9ICAgICAg
ICAgICAgU1NMLVNldHVwICAgICAgICAgICAgJHtOQ0x9IiAjPj4+IDA5CmVjaG8gIj4gRmV0Y2hp
bmcgU1NMIGNlcnRpZmljYXRlcyBmcm9tIHRoZSBzZXJ2ZXIuLiIKc2NwIC1yICRSSE9TVDokQ0VS
VF9ESVIvKiAkQ0VSVF9ESVIvICAgIAplY2hvIC1lICI+IENlcnRpZmljYXRlIFBhdGg6ICR7Q0NM
fSIkQ0VSVF9ESVIiJHtOQ0x9IgplY2hvICI+IFNTTCBDZXJ0aWZpY2F0ZXMgRG93bmxvYWRlZCBm
cm9tIHRoZSBzZXJ2ZXIuLi4iCnNsZWVwICIkRUQiCmVjaG8gLWUgIiR7QkNMfVByZXNzIGFueSBr
ZXkgdG8gY29udGludWUuLi4ke05DTH0iCnJlYWQgLW4gMSAtcyAtciBrZXkKZWNobyAtZSAiJHtZ
Q0x9ICAgICAgICAgICAgQ2VydC1JbmZvICAgICAgICAgICAgJHtOQ0x9IiAjPj4+IDEwCmVjaG8g
IkNlcnRfUGF0aD0kQ0VSVF9ESVIiIHwgdGVlIC1hICIkQ0xJRU5UX0RJUi8kQ0xJRU5UX0lORk8i
CkV4cGlyeV9EYXRlPSIkKG9wZW5zc2wgeDUwOSAtaW4gIiRDRVJUX0RJUi8kQ0VSVF9GSUxFIiAt
bm9vdXQgLWVuZGRhdGUgfCBjdXQgLWQ9IC1mMikiCmVjaG8gIiNFeHBpcnlfRGF0ZT0iJEV4cGly
eV9EYXRlIiIgPj4gIiRDTElFTlRfRElSLyRDTElFTlRfSU5GTyIKZWNobyAtZSAiRXhwaXJ5X0Rh
dGU6ICR7Q0NMfSIkRXhwaXJ5X0RhdGUiJHtOQ0x9IgplY2hvICIjQ0E9IExldCdzIEVuY3J5cHQi
ID4+ICIkQ0xJRU5UX0RJUi8kQ0xJRU5UX0lORk8iCmVjaG8gIj4iCiMqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKI0RlZmluZSBlbWFpbCBkZXRhaWxzClNVQkpFQ1Q9IkNlcnQgSXNzdWVk
IGZvciAiJERPTUFJTiIgb24gVk0tIiRJUF9BRERSIiIKTE9HX0NPTlRFTlQ9JChjYXQgIiRDTElF
TlRfRElSLyRDTElFTlRfSU5GTyIpCiMKRU1BSUxfQk9EWT0iKiogW0NlcnQtSW5mb10gKioKJExP
R19DT05URU5UCgoqKioqIEF1dG8gR2VuZXJhdGVkIG1haWwKLS0gRm9yIGFueSBRdWVyaWVzIGNv
bnRhY3QgIml0QGFmZmluZS5haSIiCiMKU0VORF9FTUFJTF9DT01NQU5EPSQoY2F0IDw8RU9GCmVj
aG8gIiRFTUFJTF9CT0RZIiB8IG1haWwgLXMgIiRTVUJKRUNUIiAiJFRPX0VNQUlMIgpFT0YKKQpl
Y2hvICI+IFByZXBhcmluZyB0byBzZW5kIGxvZ3MuLi4iCkxPRz0iWyREVEZdOjpbU2V0dXBdOjpb
JEZVTExfTkFNRV06OlskSVBfQUREUl06OlskRE9NQUlOXTo6W0NlcnRfRXhwOiRFeHBpcnlfRGF0
ZV0iCmVjaG8gJExPRyA+PiAkTE9HX0RJUi8kTE9HX0ZJTEUKc3NoICIkUkhPU1QiICJta2RpciAt
cCAkQ1JPTl9ESVIvJElQX0FERFIiCnNzaCAiJFJIT1NUIiAibWtkaXIgLXAgJENMSUVOVF9ESVIv
JElQX0FERFIiCmVjaG8gIj4gU2VuZGluZyBsb2dzIHRvIHNlcnZlci4uLiIKc2NwICRDTElFTlRf
RElSLyRDTElFTlRfSU5GTyAkUkhPU1Q6JENMSUVOVF9ESVIvIiRJUF9BRERSIi8iJENMSUVOVF9J
TkZPIgpzY3AgJENST05fRElSLyRQUkVfQ1JPTkJLICRSSE9TVDokQ1JPTl9ESVIvJElQX0FERFIv
CnNjcCAkQ1JPTl9ESVIvJFBPU1RfQ1JPTkJLICRSSE9TVDokQ1JPTl9ESVIvJElQX0FERFIvCmVj
aG8gIj4gUHJvY2Vzc2luZyBsb2dzIG9uIHNlcnZlci4uLiIKc3NoICIkUkhPU1QiICJlY2hvICRM
T0cgPj4gJExPR19ESVIvJExPR19GSUxFIgplY2hvICI+IFByb2Nlc3NpbmcgbG9ncyBvbiBzZXJ2
ZXIuLi4iCnNzaCAiJFJIT1NUIiAiJFNFTkRfRU1BSUxfQ09NTUFORCIKZWNobyAiPiBVcGRhdGlu
ZyBQZXJtaXNzaW9ucy4uLiIKc3VkbyBjaG93biAtUiAiJFVTRVJfTkFNRSI6IiRVU0VSX05BTUUi
ICRDRVJUX1JPT1QKc3VkbyBjaG93biAtUiAiJFVTRVJfTkFNRSI6IiRVU0VSX05BTUUiICRBRE1J
Tl9ESVIKZWNobyAtZSAiJHtDQ0x9Pj4gQWxsIFNldHVwIERvbmUhIDw8JHtOQ0x9IgplY2hvIC1l
ICIke0JDTH1QcmVzcyBhbnkga2V5IHRvIGZpbmlzaC4uLiR7TkNMfSIKcmVhZCAtbiAxIC1zIC1y
IGtleQplY2hvIC1lICI+ICR7WUNMfVNldHVwIGNvbXBsZXRlZCBzdWNjZXNzZnVsbHkhLi4uJHtO
Q0x9IgoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAA=
